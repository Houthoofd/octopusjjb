'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _overload;

var _prep = require('./internal/prep');

var _prep2 = _interopRequireDefault(_prep);

var _getIn = require('./getIn');

var _getIn2 = _interopRequireDefault(_getIn);

var _setIn = require('./setIn');

var _setIn2 = _interopRequireDefault(_setIn);

var _overload2 = require('./util/overload');

var _overload3 = _interopRequireDefault(_overload2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// we're not using Immutable.js updateIn because it can't cope with mixed types in the keyPath

exports.default = (0, _prep2.default)({
    name: 'updateIn',
    all: (0, _overload3.default)((_overload = {}, _defineProperty(_overload, "2", function _(fn) {
        return function (keyPath, updater) {
            return fn(keyPath, updater);
        };
    }), _defineProperty(_overload, "3", function _(fn) {
        return function (keyPath, notSetValue, updater) {
            return fn(keyPath, updater, notSetValue);
        };
    }), _overload), function (keyPath, updater) {
        var notSetValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
        return function (value) {
            var updated = updater((0, _getIn2.default)(keyPath, notSetValue)(value));
            return updated === notSetValue ? value : (0, _setIn2.default)(keyPath, updated)(value);
        };
    })
});