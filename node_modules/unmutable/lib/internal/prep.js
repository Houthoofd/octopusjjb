'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _predicates = require('../internal/predicates');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var error = function error(name, value) {
    throw new Error(name + '() cannot be called on ' + value);
};

var PREP_TYPES = [{
    type: "record",
    isType: function isType(value) {
        return (0, _predicates.isRecord)(value);
    },
    fn: function fn(name, record) {
        return typeof record === 'string' ? function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return function (value) {
                return value[record].apply(value, args);
            };
        } : record;
    }
}, {
    type: "immutable",
    isType: function isType(value) {
        return (0, _predicates._isImmutableNoRecordChecks)(value);
    },
    fn: function fn(name, immutable) {
        return typeof immutable === 'string' ? function () {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            return function (value) {
                if (!value[immutable]) {
                    error(name, value);
                }
                return value[immutable].apply(value, args);
            };
        } : immutable;
    }
}, {
    type: "array",
    isType: function isType(value) {
        return Array.isArray(value);
    },
    fn: function fn(name, array) {
        return array;
    }
}, {
    type: "object",
    isType: function isType(value) {
        return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === "object";
    },
    fn: function fn(name, object) {
        return object;
    }

}, {
    type: "all",
    isType: function isType() {
        return true;
    },
    fn: function fn(name, all) {
        return all;
    }
}];

exports.default = function (config) {
    var types = PREP_TYPES.filter(function (_ref) {
        var type = _ref.type;
        return config[type];
    }).map(function (_ref2) {
        var type = _ref2.type,
            isType = _ref2.isType,
            fn = _ref2.fn;
        return {
            type: type,
            isType: isType,
            fn: fn(config.name, config[type])
        };
    });

    return function () {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return function (value) {
            var type = types.find(function (_ref3) {
                var isType = _ref3.isType;
                return isType(value);
            });
            if (type) {
                return type.fn.apply(type, _toConsumableArray(args))(value);
            }
            error(config.name, value);
        };
    };
};