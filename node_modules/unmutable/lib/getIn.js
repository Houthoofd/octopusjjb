'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _prep = require('./internal/prep');

var _prep2 = _interopRequireDefault(_prep);

var _get = require('./get');

var _get2 = _interopRequireDefault(_get);

var _has = require('./has');

var _has2 = _interopRequireDefault(_has);

var _isValueObject = require('./util/isValueObject');

var _isValueObject2 = _interopRequireDefault(_isValueObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// we're not using Immutable.js getIn because it can't cope with mixed types in the keyPath

exports.default = (0, _prep2.default)({
    name: 'getIn',
    all: function all(keyPath) {
        var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        return function (value) {
            var ii = value;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = keyPath[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    if (!(0, _isValueObject2.default)(ii) || !(0, _has2.default)(key)(ii)) {
                        return notFoundValue;
                    }
                    ii = (0, _get2.default)(key)(ii);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return ii;
        };
    }
});