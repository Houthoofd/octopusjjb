"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _prep = require("./internal/prep");

var _prep2 = _interopRequireDefault(_prep);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = (0, _prep2.default)({
    name: "values",
    immutable: "values",
    record: function record() {
        return function (value) {
            return value.toSeq().values();
        };
    },
    // $FlowFixMe - using * as flow cannot recognise Symbol.iterator as being @@iterator (see https://github.com/facebook/flow/issues/1163)
    object: function object() {
        return function (value) {
            var _ref;

            var counter = 0;
            var keys = Object.keys(value);
            return _ref = {}, _defineProperty(_ref, Symbol.iterator, function () {
                return this;
            }), _defineProperty(_ref, "next", function next() {
                return keys.hasOwnProperty(counter) ? {
                    value: value[keys[counter++]],
                    done: false
                } : {
                    done: true
                };
            }), _ref;
        };
    },
    // $FlowFixMe - flow can't deal with computed properties
    array: function array() {
        return function (value) {
            return value[Symbol.iterator]();
        };
    }
});