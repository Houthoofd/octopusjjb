'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _prep = require('./internal/prep');

var _prep2 = _interopRequireDefault(_prep);

var _getIn = require('./getIn');

var _getIn2 = _interopRequireDefault(_getIn);

var _set = require('./set');

var _set2 = _interopRequireDefault(_set);

var _pipeWith = require('./util/pipeWith');

var _pipeWith2 = _interopRequireDefault(_pipeWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// we're not using Immutable.js setIn because it can't cope with mixed types in the keyPath

exports.default = (0, _prep2.default)({
    name: 'setIn',
    all: function all(keyPath, childValue) {
        return function (value) {
            var notFoundContainer = value.toMap ? value.toMap().clear() : {};

            for (var i = keyPath.length - 1; i >= 0; i--) {
                var partialKeyPath = keyPath.slice(0, i);
                childValue = (0, _pipeWith2.default)(value, (0, _getIn2.default)(partialKeyPath, notFoundContainer), (0, _set2.default)(keyPath[i], childValue));
            }
            return childValue;
        };
    }
});