'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _prep = require('./internal/prep');

var _prep2 = _interopRequireDefault(_prep);

var _pipeWith = require('./util/pipeWith');

var _pipeWith2 = _interopRequireDefault(_pipeWith);

var _entryArray = require('./entryArray');

var _entryArray2 = _interopRequireDefault(_entryArray);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = (0, _prep2.default)({
    name: 'filterNot',
    immutable: 'filterNot',
    record: function record(predicate) {
        return function (value) {
            return (0, _pipeWith2.default)(value, (0, _entryArray2.default)(), (0, _reduce2.default)(function (record, _ref) {
                var _ref2 = _slicedToArray(_ref, 2),
                    key = _ref2[0],
                    value = _ref2[1];

                return predicate(value, key, record) ? record.delete(key) : record;
            }, value));
        };
    },
    object: function object(predicate) {
        return function (value) {
            return Object.keys(value).reduce(function (obj, key) {
                var childValue = value[key];
                return !predicate(childValue, key, value) ? _extends({}, obj, _defineProperty({}, key, childValue)) : obj;
            }, {});
        };
    },
    array: function array(predicate) {
        return function (value) {
            return value.filter(function () {
                return !predicate.apply(undefined, arguments);
            });
        };
    }
});