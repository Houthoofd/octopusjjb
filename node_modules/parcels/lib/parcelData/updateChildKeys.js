'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _convert = require('./convert26');

var _filter = require('unmutable/lib/filter');

var _filter2 = _interopRequireDefault(_filter);

var _get = require('unmutable/lib/get');

var _get2 = _interopRequireDefault(_get);

var _identity = require('unmutable/lib/identity');

var _identity2 = _interopRequireDefault(_identity);

var _map = require('unmutable/lib/map');

var _map2 = _interopRequireDefault(_map);

var _size = require('unmutable/lib/size');

var _size2 = _interopRequireDefault(_size);

var _set = require('unmutable/lib/set');

var _set2 = _interopRequireDefault(_set);

var _take = require('unmutable/lib/take');

var _take2 = _interopRequireDefault(_take);

var _toArray = require('unmutable/lib/toArray');

var _toArray2 = _interopRequireDefault(_toArray);

var _update = require('unmutable/lib/update');

var _update2 = _interopRequireDefault(_update);

var _isIndexed = require('unmutable/lib/util/isIndexed');

var _isIndexed2 = _interopRequireDefault(_isIndexed);

var _pipe = require('unmutable/lib/util/pipe');

var _pipe2 = _interopRequireDefault(_pipe);

var _pipeWith = require('unmutable/lib/util/pipeWith');

var _pipeWith2 = _interopRequireDefault(_pipeWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toStringKey(num) {
    return '#' + (0, _convert.toString26)(num);
}

function isKey(str) {
    return str ? str[0] === "#" : false;
}

function toIntKey(str) {
    // $FlowFixMe - isKey() prevents .slice() from being called on null
    return isKey(str) ? (0, _convert.toInt26)(str.slice(1)) : undefined;
}

exports.default = function () {
    return function (parcelData) {
        var value = parcelData.value,
            child = parcelData.child;


        if (!(0, _isIndexed2.default)(value)) {
            var _updateChild = (0, _map2.default)(function (node, key) {
                return (0, _set2.default)('key', key)(node);
            });

            return (0, _pipeWith2.default)(parcelData, (0, _update2.default)('child', _updateChild));
        }

        var keys = (0, _pipeWith2.default)(child, (0, _toArray2.default)(), (0, _map2.default)((0, _pipe2.default)((0, _get2.default)('key'), toIntKey)));

        var highest = (0, _pipeWith2.default)(keys, (0, _filter2.default)((0, _identity2.default)()), function (keys) {
            return Math.max.apply(Math, [0].concat((0, _toConsumableArray3.default)(keys)));
        });

        var updateChild = (0, _pipe2.default)((0, _take2.default)((0, _size2.default)()(value)), (0, _map2.default)((0, _update2.default)('key', function (key) {
            return isKey(key) ? key : toStringKey(++highest);
        })));

        return (0, _pipeWith2.default)(parcelData, (0, _update2.default)('child', updateChild));
    };
};