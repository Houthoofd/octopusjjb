'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _runtimeTypes;

var _Parcel = require('../parcel/Parcel');

var _Parcel2 = _interopRequireDefault(_Parcel);

var _Action = require('../change/Action');

var _Action2 = _interopRequireDefault(_Action);

var _ChangeRequest = require('../change/ChangeRequest');

var _ChangeRequest2 = _interopRequireDefault(_ChangeRequest);

var _isPlainObject = require('unmutable/lib/util/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var runtimeTypes = (_runtimeTypes = {}, (0, _defineProperty3.default)(_runtimeTypes, 'boolean', {
    name: "a boolean",
    check: function check(ii) {
        return typeof ii === "boolean";
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'dispatchable', {
    name: "an Action, an array of Actions, or a ChangeRequest",
    check: function check(ii) {
        return ii instanceof _Action2.default || Array.isArray(ii) && ii.every(function (jj) {
            return jj instanceof _Action2.default;
        }) || ii instanceof _ChangeRequest2.default;
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'event', {
    name: "an event",
    check: function check(ii) {
        return ii && ii.currentTarget;
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'function', {
    name: "a function",
    check: function check(ii) {
        return typeof ii === "function";
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'functionArray', {
    name: "functions",
    check: function check(ii) {
        return ii && Array.isArray(ii) && ii.every(function (jj) {
            return typeof jj === "function";
        });
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'functionOptional', {
    name: "a function",
    check: function check(ii) {
        return typeof ii === "undefined" || typeof ii === "function";
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'keyIndex', {
    name: "a key or an index (string or number)",
    check: function check(ii) {
        return typeof ii === "string" || typeof ii === "number";
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'keyIndexPath', {
    name: "an array of keys or indexes (strings or numbers)",
    check: function check(ii) {
        return ii && Array.isArray(ii) && ii.every(function (jj) {
            return typeof jj === "string" || typeof jj === "number";
        });
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'modifier', {
    name: "a modifier function, or an object like {modifier: Function, match: ?string}",
    check: function check(ii) {
        return typeof ii === "function" || (typeof ii === 'undefined' ? 'undefined' : (0, _typeof3.default)(ii)) === "object" && ii.modifier && typeof ii.modifier === "function";
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'number', {
    name: "a number",
    check: function check(ii) {
        return typeof ii === "number";
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'object', {
    name: "an object",
    check: function check(ii) {
        return (typeof ii === 'undefined' ? 'undefined' : (0, _typeof3.default)(ii)) === "object";
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'parcel', {
    name: "a Parcel",
    check: function check(ii) {
        return ii instanceof _Parcel2.default;
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'parcelData', {
    name: "an object containing parcel data {value: *, meta?: {}, key?: *}",
    check: function check(ii) {
        return (0, _isPlainObject2.default)(ii) && ii.hasOwnProperty('value');
    }
}), (0, _defineProperty3.default)(_runtimeTypes, 'string', {
    name: "a string",
    check: function check(ii) {
        return typeof ii === "string";
    }
}), _runtimeTypes);

exports.default = function (message, type) {
    return function (value) {
        var runtimeType = runtimeTypes[type];
        if (!runtimeType) {
            throw new Error('Unknown type check');
        }
        if (!runtimeType.check(value)) {
            // $FlowFixMe - I want to make value into a string regardless of flows opinions https://github.com/facebook/flow/issues/1460
            throw new Error(message + ' ' + runtimeType.name + ', but got ' + (value + ""));
        }
        return value;
    };
};