'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action = require('./Action');

var _Action2 = _interopRequireDefault(_Action);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var del = function del(key) {
    return new _Action2.default({
        type: "delete",
        keyPath: [key]
    });
};

var deleteSelf = function deleteSelf() {
    return new _Action2.default({
        type: "delete"
    });
};

var insertAfter = function insertAfter(key, value) {
    return new _Action2.default({
        type: "insertAfter",
        keyPath: [key],
        payload: {
            value: value
        }
    });
};

var insertAfterSelf = function insertAfterSelf(value) {
    return new _Action2.default({
        type: "insertAfter",
        payload: {
            value: value
        }
    });
};

var insertBefore = function insertBefore(key, value) {
    return new _Action2.default({
        type: "insertBefore",
        keyPath: [key],
        payload: {
            value: value
        }
    });
};

var insertBeforeSelf = function insertBeforeSelf(value) {
    return new _Action2.default({
        type: "insertBefore",
        payload: {
            value: value
        }
    });
};

var ping = function ping() {
    return new _Action2.default({
        type: "ping"
    });
};

var push = function push(value) {
    return new _Action2.default({
        type: "push",
        payload: {
            value: value
        }
    });
};

var pop = function pop() {
    return new _Action2.default({
        type: "pop"
    });
};

var setMeta = function setMeta(meta) {
    return new _Action2.default({
        type: "setMeta",
        payload: {
            meta: meta
        }
    });
};

var setSelf = function setSelf(value) {
    return new _Action2.default({
        type: "set",
        payload: {
            value: value
        }
    });
};

var shift = function shift() {
    return new _Action2.default({
        type: "shift"
    });
};

var swap = function swap(keyA, keyB) {
    return new _Action2.default({
        type: "swap",
        keyPath: [keyA],
        payload: {
            swapKey: keyB
        }
    });
};

var swapNext = function swapNext(key) {
    return new _Action2.default({
        type: "swapNext",
        keyPath: [key]
    });
};

var swapNextWithSelf = function swapNextWithSelf() {
    return new _Action2.default({
        type: "swapNext"
    });
};

var swapPrev = function swapPrev(key) {
    return new _Action2.default({
        type: "swapPrev",
        keyPath: [key]
    });
};

var swapPrevWithSelf = function swapPrevWithSelf() {
    return new _Action2.default({
        type: "swapPrev"
    });
};

var swapWithSelf = function swapWithSelf(keyB) {
    return new _Action2.default({
        type: "swap",
        payload: {
            swapKey: keyB
        }
    });
};

var unshift = function unshift(value) {
    return new _Action2.default({
        type: "unshift",
        payload: {
            value: value
        }
    });
};

exports.default = {
    delete: del,
    deleteSelf: deleteSelf,
    insertAfter: insertAfter,
    insertAfterSelf: insertAfterSelf,
    insertBefore: insertBefore,
    insertBeforeSelf: insertBeforeSelf,
    ping: ping,
    push: push,
    pop: pop,
    setMeta: setMeta,
    setSelf: setSelf,
    shift: shift,
    swap: swap,
    swapNext: swapNext,
    swapNextWithSelf: swapNextWithSelf,
    swapPrev: swapPrev,
    swapPrevWithSelf: swapPrevWithSelf,
    swapWithSelf: swapWithSelf,
    unshift: unshift
};