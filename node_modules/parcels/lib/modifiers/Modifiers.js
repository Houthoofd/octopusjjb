'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _Matcher = require('./Matcher');

var _Matcher2 = _interopRequireDefault(_Matcher);

var _filter = require('unmutable/lib/filter');

var _filter2 = _interopRequireDefault(_filter);

var _map = require('unmutable/lib/map');

var _map2 = _interopRequireDefault(_map);

var _push = require('unmutable/lib/push');

var _push2 = _interopRequireDefault(_push);

var _reduce = require('unmutable/lib/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _pipeWith = require('unmutable/lib/util/pipeWith');

var _pipeWith2 = _interopRequireDefault(_pipeWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Modifiers = function Modifiers() {
    var modifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    (0, _classCallCheck3.default)(this, Modifiers);

    _initialiseProps.call(this);

    this._modifiers = (0, _pipeWith2.default)(modifiers, (0, _map2.default)(this.toModifierObject));
};

var _initialiseProps = function _initialiseProps() {
    var _this = this;

    this.toModifierObject = function (modifier) {
        return typeof modifier === "function" ? { modifier: modifier } : modifier;
    };

    this.add = function (modifier) {
        // TODO - add validation
        return (0, _pipeWith2.default)(_this._modifiers, (0, _push2.default)(_this.toModifierObject(modifier)), function (ii) {
            return new Modifiers(ii);
        });
    };

    this.applyTo = function (parcel) {
        var typedPathString = parcel._typedPathString();
        return (0, _pipeWith2.default)(_this._modifiers, (0, _filter2.default)(function (_ref) {
            var match = _ref.match;

            return !match || (0, _Matcher2.default)(typedPathString, match);
        }), (0, _reduce2.default)(function (parcel, modifier) {
            return modifier.modifier(parcel);
        }, parcel));
    };

    this.isEmpty = function () {
        return _this._modifiers.length === 0;
    };

    this.set = function (modifiers) {
        // TODO - add validation
        return (0, _pipeWith2.default)(modifiers, (0, _map2.default)(_this.toModifierObject), function (ii) {
            return new Modifiers(ii);
        });
    };

    this.toJS = function () {
        return _this._modifiers;
    };
};

exports.default = Modifiers;