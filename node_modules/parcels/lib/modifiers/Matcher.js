'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.containsGlobstar = exports.containsWildcard = exports.split = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _TYPE_SELECTORS;

var _escapeStringRegexp = require('escape-string-regexp');

var _escapeStringRegexp2 = _interopRequireDefault(_escapeStringRegexp);

var _doIf = require('unmutable/lib/doIf');

var _doIf2 = _interopRequireDefault(_doIf);

var _join = require('unmutable/lib/join');

var _join2 = _interopRequireDefault(_join);

var _keyArray = require('unmutable/lib/keyArray');

var _keyArray2 = _interopRequireDefault(_keyArray);

var _map = require('unmutable/lib/map');

var _map2 = _interopRequireDefault(_map);

var _sort = require('unmutable/lib/sort');

var _sort2 = _interopRequireDefault(_sort);

var _pipe = require('unmutable/lib/util/pipe');

var _pipe2 = _interopRequireDefault(_pipe);

var _pipeWith = require('unmutable/lib/util/pipeWith');

var _pipeWith2 = _interopRequireDefault(_pipeWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var split = exports.split = function split(match) {
    return (0, _pipeWith2.default)(match, escapeSplitChars, function (ii) {
        return ii.split(".");
    }, (0, _map2.default)(unescapeSplitChars));
};

var containsWildcard = exports.containsWildcard = function containsWildcard(match) {
    return (0, _pipeWith2.default)(match, escapeSplitChars, function (ii) {
        return ii.replace(/\*\*/g, "").indexOf("*") !== -1;
    });
};

var containsGlobstar = exports.containsGlobstar = function containsGlobstar(match) {
    return (0, _pipeWith2.default)(match, escapeSplitChars, function (ii) {
        return ii.indexOf("**") !== -1;
    });
};

var TYPE_SELECTORS = (_TYPE_SELECTORS = {}, (0, _defineProperty3.default)(_TYPE_SELECTORS, "Child", "C"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "!Child", "c"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "Element", "E"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "!Element", "e"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "Indexed", "I"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "!Indexed", "i"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "Parent", "P"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "!Parent", "p"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "TopLevel", "T"), (0, _defineProperty3.default)(_TYPE_SELECTORS, "!TopLevel", "t"), _TYPE_SELECTORS);

var SPLIT_CHARS = [".", ":", "|", "*"];
var REGEX_SPLIT_CHARS = SPLIT_CHARS.map(_escapeStringRegexp2.default);

var addImpliedCarat = (0, _doIf2.default)(function (ii) {
    return ii[0] !== "^" && '' + ii[0] + ii[1] !== "**";
}, function (ii) {
    return '^.' + ii;
});

var escapeSplitChars = _pipe2.default.apply(undefined, (0, _toConsumableArray3.default)((0, _pipeWith2.default)(REGEX_SPLIT_CHARS, (0, _map2.default)(function (chr, index) {
    return function (str) {
        return str.replace(new RegExp('%' + chr, "g"), '%' + index);
    };
}))));

var unescapeSplitChars = _pipe2.default.apply(undefined, (0, _toConsumableArray3.default)((0, _pipeWith2.default)(SPLIT_CHARS, (0, _map2.default)(function (chr, index) {
    return function (str) {
        return str.replace(new RegExp('%' + index, "g"), '%' + chr);
    };
}))));

var regexifyGlobstars = function regexifyGlobstars(str) {
    return str.replace(/\\\*\\\*/g, ".*?");
};
var regexifyWildcards = function regexifyWildcards(str) {
    return str.replace(/\\\*/g, "[^^.]*?");
};

var regexifyPart = function regexifyPart(part) {
    var _part$split = part.split(":"),
        _part$split2 = (0, _slicedToArray3.default)(_part$split, 2),
        name = _part$split2[0],
        type = _part$split2[1];

    // if no type, match any type selector


    if (!type) {
        return name + ':[^^.]*?';
    }

    // split types apart and replace with type selectors
    var types = (0, _pipeWith2.default)(type.split('\\|'), (0, _sort2.default)(), (0, _map2.default)(function (tt) {
        var typeSelector = TYPE_SELECTORS[tt];
        if (!typeSelector) {
            var choices = (0, _pipeWith2.default)(TYPE_SELECTORS, (0, _keyArray2.default)(), (0, _join2.default)(", "));
            throw new Error('"' + tt + '" is not a valid type selector. Choose one of ' + choices);
        }
        return typeSelector;
    }), (0, _join2.default)());

    return name + ':[^^.]*?[' + types + '][^^.]*?';
};

exports.default = function (typedPathString, match) {
    return (0, _pipeWith2.default)(match, addImpliedCarat, escapeSplitChars, _escapeStringRegexp2.default, function (ii) {
        return ii.split("\\.");
    }, (0, _map2.default)(regexifyPart), (0, _join2.default)("\\."), regexifyGlobstars, regexifyWildcards, function (regex) {
        return '^' + regex + '$';
    }, function (regex) {
        var test = escapeSplitChars(typedPathString);
        return new RegExp(regex, "g").test(test);
    });
};