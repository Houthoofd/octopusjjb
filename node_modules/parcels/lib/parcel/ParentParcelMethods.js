'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Types = require('../types/Types');

var _Types2 = _interopRequireDefault(_Types);

var _MethodCreator = require('./MethodCreator');

var _MethodCreator2 = _interopRequireDefault(_MethodCreator);

var _forEach = require('../parcelData/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _get = require('../parcelData/get');

var _get2 = _interopRequireDefault(_get);

var _has = require('../parcelData/has');

var _has2 = _interopRequireDefault(_has);

var _size2 = require('unmutable/lib/size');

var _size3 = _interopRequireDefault(_size2);

var _toArray2 = require('unmutable/lib/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _MethodCreator2.default)("Parent", function (_this) {
    return {

        // get methods

        has: function has(key) {
            (0, _Types2.default)('has() expects param "key" to be', 'keyIndex')(key);
            return (0, _has2.default)(key)(_this._parcelData);
        },

        get: function get(key, notFoundValue) {
            (0, _Types2.default)('get() expects param "key" to be', 'keyIndex')(key);
            var childParcelData = (0, _get2.default)(key, notFoundValue)(_this._parcelData);

            var childOnDispatch = function childOnDispatch(changeRequest) {
                // $FlowFixMe - key *will* exist, but our types are too flexible and can't tell that
                _this.dispatch(changeRequest._unget(childParcelData.key));
            };

            return _this._create({
                parcelData: childParcelData,
                onDispatch: childOnDispatch,
                id: _this._id.push(childParcelData.key, _this.isIndexed()),
                parent: _this
            });
        },

        getIn: function getIn(keyPath, notFoundValue) {
            (0, _Types2.default)('getIn() expects param "keyPath" to be', 'keyIndexPath')(keyPath);
            var parcel = _this;
            for (var i = 0; i < keyPath.length; i++) {
                parcel = parcel.get(keyPath[i], i < keyPath.length - 1 ? {} : notFoundValue);
            }
            return parcel;
        },

        toObject: function toObject() {
            var mapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (ii) {
                return ii;
            };

            (0, _Types2.default)('toObject() expects param "mapper" to be', 'function')(mapper);
            var obj = {};

            (0, _forEach2.default)(function (parcelData, index) {
                var item = _this.get(index);
                var mapped = mapper(item, index, _this);
                obj[index] = mapped;
            })(_this._parcelData);

            return obj;
        },

        toArray: function toArray() {
            var mapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (ii) {
                return ii;
            };

            (0, _Types2.default)('toArray() expects param "mapper" to be', 'function')(mapper);
            return (0, _toArray3.default)()(_this.toObject(mapper));
        },

        size: function size() {
            return (0, _size3.default)()(_this.value());
        },

        // change methods

        set: function set(key, value) {
            (0, _Types2.default)('set() expects param "key" to be', 'keyIndex')(key);
            _this.get(key).setSelf(value);
        },

        update: function update(key, updater) {
            (0, _Types2.default)('update() expects param "key" to be', 'keyIndex')(key);
            (0, _Types2.default)('update() expects param "updater" to be', 'function')(updater);
            _this.get(key).updateSelf(updater);
        },

        setIn: function setIn(keyPath, value) {
            (0, _Types2.default)('setIn() expects param "keyPath" to be', 'keyIndexPath')(keyPath);
            _this.getIn(keyPath).setSelf(value);
        },

        updateIn: function updateIn(keyPath, updater) {
            (0, _Types2.default)('updateIn() expects param "keyPath" to be', 'keyIndexPath')(keyPath);
            (0, _Types2.default)('update() expects param "updater" to be', 'function')(updater);
            _this.getIn(keyPath).updateSelf(updater);
        }
    };
});