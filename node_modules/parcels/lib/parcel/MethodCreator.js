'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _map = require('unmutable/lib/map');

var _map2 = _interopRequireDefault(_map);

var _pipeWith = require('unmutable/lib/util/pipeWith');

var _pipeWith2 = _interopRequireDefault(_pipeWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (parcelType, methodCreator) {
    return function (parcel) {
        var methods = methodCreator(parcel);

        // $FlowFixMe - I want to do this
        if (typeof parcelType === "boolean" || parcel['is' + parcelType]()) {
            return methods;
        }

        return (0, _pipeWith2.default)(methods, (0, _map2.default)(function (value, key) {
            return function () {
                // $FlowFixMe - It's ok to throw a boolean (which'll never get here anyway) into a template string
                throw new Error('Cannot call .' + key + '() on Parcel with path [' + parcel.path().join(', ') + ']. Expected a ' + parcelType + 'Parcel, but got a Parcel with a value of "' + parcel.value() + '"');
            };
        }));
    };
};