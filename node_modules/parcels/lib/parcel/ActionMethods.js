'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Types = require('../types/Types');

var _Types2 = _interopRequireDefault(_Types);

var _ChangeRequest = require('../change/ChangeRequest');

var _ChangeRequest2 = _interopRequireDefault(_ChangeRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (_this) {
    return {
        _handleChange: function _handleChange(_onHandleChange, changeRequest) {
            var parcel = _this._create({
                parcelData: changeRequest.setBaseParcel(_this).data()
            });

            _onHandleChange(parcel, changeRequest);
        },

        dispatch: function dispatch(dispatchable) {
            (0, _Types2.default)('dispatch() expects param "dispatchable" to be', 'dispatchable')(dispatchable);

            var _onDispatch = _this._onDispatch,
                _onHandleChange = _this._onHandleChange;


            _this._treeshare.dispatch.markPathAsDispatched(_this.path());

            var changeRequest = dispatchable instanceof _ChangeRequest2.default ? dispatchable : new _ChangeRequest2.default(dispatchable);

            if (!changeRequest._originId) {
                changeRequest._originId = _this.id();
                changeRequest._originPath = _this.path();
            }

            if (_this._dispatchBuffer) {
                _this._dispatchBuffer(changeRequest);
                return;
            }

            if (_onHandleChange) {
                _this._handleChange(_onHandleChange, changeRequest);
                return;
            }
            _onDispatch && _onDispatch(changeRequest);
        },

        batch: function batch(batcher, changeRequest) {
            (0, _Types2.default)('batch() expects param "batcher" to be', 'function')(batcher);

            var parcelData = _this._parcelData;
            var lastBuffer = _this._dispatchBuffer;

            var buffer = changeRequest ? changeRequest.updateActions(function () {
                return [];
            }) // TODO - if changeRequest implements caching, is this enough data clearing?
            : new _ChangeRequest2.default();

            _this._dispatchBuffer = function (changeRequest) {
                buffer = buffer.merge(changeRequest);
                _this._parcelData = changeRequest.setBaseParcel(_this).data();
            };

            batcher(_this);
            _this._dispatchBuffer = lastBuffer;
            if (buffer.actions().length === 0) {
                return;
            }

            _this._parcelData = parcelData;
            _this.dispatch(buffer);
        }
    };
};