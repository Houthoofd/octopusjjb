'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _Types = require('../types/Types');

var _Types2 = _interopRequireDefault(_Types);

var _strip = require('../parcelData/strip');

var _strip2 = _interopRequireDefault(_strip);

var _filterNot = require('unmutable/lib/filterNot');

var _filterNot2 = _interopRequireDefault(_filterNot);

var _has = require('unmutable/lib/has');

var _has2 = _interopRequireDefault(_has);

var _isEmpty = require('unmutable/lib/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _map = require('unmutable/lib/map');

var _map2 = _interopRequireDefault(_map);

var _merge = require('unmutable/lib/merge');

var _merge2 = _interopRequireDefault(_merge);

var _set = require('unmutable/lib/set');

var _set2 = _interopRequireDefault(_set);

var _setIn = require('unmutable/lib/setIn');

var _setIn2 = _interopRequireDefault(_setIn);

var _pipe = require('unmutable/lib/util/pipe');

var _pipe2 = _interopRequireDefault(_pipe);

var _pipeWith = require('unmutable/lib/util/pipeWith');

var _pipeWith2 = _interopRequireDefault(_pipeWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (_this) {
    return {

        // private methods
        _applyModifiers: function _applyModifiers() {
            return _this._modifiers.applyTo(_this);
        },

        // modify methods
        modify: function modify() {
            for (var _len = arguments.length, updaters = Array(_len), _key = 0; _key < _len; _key++) {
                updaters[_key] = arguments[_key];
            }

            (0, _Types2.default)('modify() expects all params to be', 'functionArray')(updaters);
            return _pipeWith2.default.apply(undefined, [_this].concat((0, _toConsumableArray3.default)((0, _pipeWith2.default)(updaters, (0, _map2.default)(function (updater) {
                return (0, _pipe2.default)(updater, (0, _Types2.default)('modify() expects the result of all functions to be', 'parcel'));
            })))));
        },

        modifyData: function modifyData(updater) {
            (0, _Types2.default)('modifyData() expects param "updater" to be', 'function')(updater);
            return (0, _pipeWith2.default)(_this._parcelData, (0, _strip2.default)(), updater, (0, _Types2.default)('modifyData() expects the result of updater() to be', 'parcelData'), function (parcelData) {
                return {
                    parcelData: parcelData,
                    id: _this._id.pushModifier('md')
                };
            }, _this._create);
        },

        modifyValue: function modifyValue(updater) {
            (0, _Types2.default)('modifyValue() expects param "updater" to be', 'function')(updater);
            return (0, _pipeWith2.default)(_this._parcelData, (0, _set2.default)('value', updater(_this._parcelData.value, _this)), function (parcelData) {
                return {
                    parcelData: parcelData,
                    id: _this._id.pushModifier('mv')
                };
            }, _this._create);
        },

        modifyChange: function modifyChange(batcher) {
            (0, _Types2.default)('modifyChange() expects param "batcher" to be', 'function')(batcher);
            return (0, _pipeWith2.default)(_this._parcelData, function (parcelData) {
                return {
                    parcelData: parcelData,
                    id: _this._id.pushModifier('mc'),
                    onDispatch: function onDispatch(changeRequest) {
                        _this.batch(function (parcel) {
                            return batcher(parcel, changeRequest.setBaseParcel(parcel));
                        }, changeRequest);
                    }
                };
            }, _this._create);
        },

        modifyChangeValue: function modifyChangeValue(updater) {
            (0, _Types2.default)('modifyChangeValue() expects param "updater" to be', 'function')(updater);
            return _this.modifyChange(function (parcel, changeRequest) {

                var valueActionFilter = function valueActionFilter(actions) {
                    return actions.filter(function (action) {
                        return !action.isValueAction();
                    });
                };
                parcel.dispatch(changeRequest.updateActions(valueActionFilter));

                (0, _pipeWith2.default)(changeRequest.data().value, updater, parcel.onChange);
            });
        },

        initialMeta: function initialMeta() {
            var _initialMeta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            (0, _Types2.default)('initialMeta() expects param "initialMeta" to be', 'object')(_initialMeta);
            var meta = _this._parcelData.meta;


            var partialMetaToSet = (0, _pipeWith2.default)(_initialMeta, (0, _filterNot2.default)(function (value, key) {
                return (0, _has2.default)(key)(meta);
            }));

            var metaSetter = (0, _isEmpty2.default)()(partialMetaToSet) ? function (ii) {
                return ii;
            } : (0, _pipe2.default)((0, _setIn2.default)(['parcelData', 'meta'], (0, _merge2.default)(partialMetaToSet)(meta)), (0, _set2.default)('onDispatch', function (changeRequest) {
                _this.batch(function (parcel) {
                    parcel.setMeta(partialMetaToSet);
                    parcel.dispatch(changeRequest);
                });
            }));

            return (0, _pipeWith2.default)(_this._parcelData, function (parcelData) {
                return {
                    parcelData: parcelData,
                    id: _this._id.pushModifier('im')
                };
            }, metaSetter, _this._create);
        },

        addModifier: function addModifier(modifier) {
            (0, _Types2.default)('addModifier() expects param "modifier" to be', 'modifier')(modifier);
            return (0, _pipeWith2.default)(modifier, _this.addDescendantModifier, function (parcel) {
                return parcel._applyModifiers();
            });
        },

        addDescendantModifier: function addDescendantModifier(modifier) {
            (0, _Types2.default)('addDescendantModifier() expects param "modifier" to be', 'modifier')(modifier);
            // explicitly mutate, see https://github.com/blueflag/parcels/issues/43
            _this._modifiers = _this._modifiers.add(modifier);
            return _this;
        }
    };
};