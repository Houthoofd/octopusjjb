'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _Types = require('../types/Types');

var _Types2 = _interopRequireDefault(_Types);

var _Modifiers = require('../modifiers/Modifiers');

var _Modifiers2 = _interopRequireDefault(_Modifiers);

var _ActionMethods = require('./ActionMethods');

var _ActionMethods2 = _interopRequireDefault(_ActionMethods);

var _ChildParcelMethods = require('./ChildParcelMethods');

var _ChildParcelMethods2 = _interopRequireDefault(_ChildParcelMethods);

var _ElementParcelMethods = require('./ElementParcelMethods');

var _ElementParcelMethods2 = _interopRequireDefault(_ElementParcelMethods);

var _IndexedParcelMethods = require('./IndexedParcelMethods');

var _IndexedParcelMethods2 = _interopRequireDefault(_IndexedParcelMethods);

var _ModifyMethods = require('./ModifyMethods');

var _ModifyMethods2 = _interopRequireDefault(_ModifyMethods);

var _ParcelTypes = require('./ParcelTypes');

var _ParcelTypes2 = _interopRequireDefault(_ParcelTypes);

var _ParentParcelMethods = require('./ParentParcelMethods');

var _ParentParcelMethods2 = _interopRequireDefault(_ParentParcelMethods);

var _ValueParcelMethods = require('./ValueParcelMethods');

var _ValueParcelMethods2 = _interopRequireDefault(_ValueParcelMethods);

var _ParcelId = require('../parcelId/ParcelId');

var _ParcelId2 = _interopRequireDefault(_ParcelId);

var _Treeshare = require('../treeshare/Treeshare');

var _Treeshare2 = _interopRequireDefault(_Treeshare);

var _map = require('unmutable/lib/map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_CONFIG_INTERNAL = {
    onDispatch: undefined,
    child: undefined,
    meta: {},
    id: new _ParcelId2.default(),
    modifiers: undefined,
    parent: undefined,
    treeshare: undefined
};

var Parcel =
// - element parcel methods


//
// public change methods
//

// - action methods

// - parent parcel methods

// - value parcel methods


//
// public get methods
//

// get methods
// - type methods


//
// private data
//

function Parcel() {
    var _this = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _configInternal = arguments[1];
    (0, _classCallCheck3.default)(this, Parcel);

    _initialiseProps.call(this);

    (0, _Types2.default)('Parcel() expects param "config" to be', 'object')(config);

    var handleChange = config.handleChange,
        value = config.value,
        _config$debugRender = config.debugRender,
        debugRender = _config$debugRender === undefined ? false : _config$debugRender;


    (0, _Types2.default)('Parcel() expects param "config.handleChange" to be', 'functionOptional')(handleChange);
    (0, _Types2.default)('Parcel() expects param "config.debugRender" to be', 'boolean')(debugRender);

    var _ref = _configInternal || DEFAULT_CONFIG_INTERNAL,
        onDispatch = _ref.onDispatch,
        child = _ref.child,
        meta = _ref.meta,
        id = _ref.id,
        modifiers = _ref.modifiers,
        parent = _ref.parent,
        treeshare = _ref.treeshare;

    this._onHandleChange = handleChange;
    this._onDispatch = onDispatch;

    this._parcelData = {
        value: value,
        child: child,
        key: id.key(),
        meta: meta
    };

    // types
    this._parcelTypes = new _ParcelTypes2.default(value, parent && parent._parcelTypes, id);

    this._id = id.setTypeCode(this._parcelTypes.toTypeCode());

    // modifiers
    this._modifiers = modifiers || new _Modifiers2.default();

    // treeshare
    this._treeshare = treeshare || new _Treeshare2.default({ debugRender: debugRender });
    this._treeshare.registry.set(id.id(), this);

    // parcel type methods
    this.isChild = this._parcelTypes.isChild;
    this.isElement = this._parcelTypes.isElement;
    this.isIndexed = this._parcelTypes.isIndexed;
    this.isParent = this._parcelTypes.isParent;
    this.isTopLevel = this._parcelTypes.isTopLevel;

    // id methods
    this._typedPathString = this._id.typedPathString;
    this.key = this._id.key;
    this.id = this._id.id;
    this.path = this._id.path;

    // method creators
    // $FlowFixMe - I want to use compued properties, go away flow
    var addMethods = (0, _map2.default)(function (fn, name) {
        return _this[name] = fn;
    });
    addMethods((0, _extends3.default)({}, (0, _ActionMethods2.default)(this), (0, _ChildParcelMethods2.default)(this), (0, _ElementParcelMethods2.default)(this), (0, _IndexedParcelMethods2.default)(this), (0, _ModifyMethods2.default)(this), (0, _ParentParcelMethods2.default)(this), (0, _ValueParcelMethods2.default)(this)));
}

//
// private
//

//
// public mutation methods
//

// - value parcel methods


//
// public modify methods
//

// - modify methods

// - child parcel methods

// - indexed parcel methods

// - parent parcel methods

// - value parcel methods

// - id methods


//
// private methods
//

// - id methods
;

var _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._create = function (createParcelConfig) {
        var _createParcelConfig$i = createParcelConfig.id,
            id = _createParcelConfig$i === undefined ? _this2._id : _createParcelConfig$i,
            _createParcelConfig$p = createParcelConfig.parcelData,
            child = _createParcelConfig$p.child,
            value = _createParcelConfig$p.value,
            _createParcelConfig$p2 = _createParcelConfig$p.meta,
            meta = _createParcelConfig$p2 === undefined ? {} : _createParcelConfig$p2,
            parent = createParcelConfig.parent,
            _createParcelConfig$o = createParcelConfig.onDispatch,
            onDispatch = _createParcelConfig$o === undefined ? _this2.dispatch : _createParcelConfig$o;


        var parcel = new Parcel({
            value: value
        }, {
            child: child,
            meta: meta,
            id: id,
            modifiers: _this2._modifiers,
            onDispatch: onDispatch,
            parent: parent,
            treeshare: _this2._treeshare
        });

        return parent ? parcel._applyModifiers() : parcel;
    };
};

exports.default = Parcel;